{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mdfm9\\\\Desktop\\\\Handpose\\\\Gesture\\\\src\\\\App.js\";\nimport React, { useRef, useState } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport { drawHand } from \"./utilities\";\nimport * as fp from \"fingerpose\";\nimport letra_B from \"./Letra A.png\";\n\nfunction App() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const runHandpose = async () => {\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded.\"); //  Loop and detect hands\n\n    setInterval(() => {\n      detect(net);\n    }, 100);\n  };\n\n  const detect = async net => {\n    // Check data is available\n    if (typeof webcamRef.current !== \"undefined\" && webcamRef.current !== null && webcamRef.current.video.readyState === 4) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight; // Set video width\n\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight; // Set canvas height and width\n\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight; // Make Detections\n\n      const hand = await net.estimateHands(video);\n      console.log(hand);\n\n      if (hand.length > 0) {\n        const GE = new fp.GestureEstimator([fp.Gestures.ThumbsUpGesture, fp.Gestures.VictoryGesture]);\n        const gesture = await GE.estimate(hand[0].landmarks, 8);\n        console.log(gesture);\n      } // Draw mesh\n\n\n      const ctx = canvasRef.current.getContext(\"2d\");\n      drawHand(hand, ctx);\n    }\n  };\n\n  runHandpose();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Webcam, {\n    ref: webcamRef,\n    style: {\n      position: \"absolute\",\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n      left: 0,\n      right: 0,\n      textAlign: \"center\",\n      zindex: 9,\n      width: 640,\n      height: 480\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      position: \"absolute\",\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n      left: 0,\n      right: 0,\n      textAlign: \"center\",\n      zindex: 9,\n      width: 640,\n      height: 480\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/mdfm9/Desktop/Handpose/Gesture/src/App.js"],"names":["React","useRef","useState","tf","handpose","Webcam","drawHand","fp","letra_B","App","webcamRef","canvasRef","runHandpose","net","load","console","log","setInterval","detect","current","video","readyState","videoWidth","videoHeight","width","height","hand","estimateHands","length","GE","GestureEstimator","Gestures","ThumbsUpGesture","VictoryGesture","gesture","estimate","landmarks","ctx","getContext","position","marginLeft","marginRight","left","right","textAlign","zindex"],"mappings":"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","sourcesContent":["\n\nimport React, { useRef, useState } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport { drawHand } from \"./utilities\";\n\nimport * as fp from \"fingerpose\";\nimport letra_B from \"./Letra A.png\";\n\n\n\nfunction App() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const runHandpose = async () => {\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded.\");\n    //  Loop and detect hands\n    setInterval(() => {\n      detect(net);\n    }, 100);\n  };\n\n  const detect = async (net) => {\n    // Check data is available\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      // Set video width\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      // Set canvas height and width\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      // Make Detections\n      const hand = await net.estimateHands(video);\n      console.log(hand);\n\n\n      if(hand.length >0){\n        const GE = new fp.GestureEstimator([\n            fp.Gestures.ThumbsUpGesture,\n            fp.Gestures.VictoryGesture,   \n             \n        ])\n\n          const gesture = await GE.estimate(hand[0].landmarks, 8);\n          console.log(gesture);\n\n       \n        }\n      \n\n      // Draw mesh\n      const ctx = canvasRef.current.getContext(\"2d\");\n      drawHand(hand, ctx);\n    }\n  };\n\n  runHandpose();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Webcam\n          ref={webcamRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />\n\n        <canvas\n          ref={canvasRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}